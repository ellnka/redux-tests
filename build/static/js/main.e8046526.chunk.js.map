{"version":3,"sources":["redux/actionTypes.js","redux/actions/game.js","redux/consts.js","components/gameCard.js","components/gameGreeting.js","components/gameResults.js","components/gameQuestion.js","components/gameAnswers.js","components/game.js","components/games.js","components/loading.js","redux/actions/games.js","meduzaApp.js","redux/reducers/index.js","redux/reducers/games.js","redux/reducers/game.js","serviceWorker.js","index.js","redux/store.js"],"names":["GAMES_HAS_ERRORED","GAMES_IS_LOADING","GAMES_FETCH_DATA_SUCCESS","GAME_HAS_ERRORED","GAME_IS_LOADING","GAME_FETCH_DATA_SUCCESS","GAME_STARTED","GAME_ANSWERED","GAME_FINISHED","SET_QUESTION","GAME_RESET","gameStart","type","setQuestion","question_id","gameIsLoading","bool","isLoading","gameFetch","url","dispatch","fetch","method","headers","Content-Type","redirect","then","response","console","log","ok","Error","statusText","json","game","gameFetchDataSuccess","catch","error","hasErrored","GameCard","react_default","a","createElement","className","src","this","props","gameCard","img","alt","title","href","onClick","_gameOnClickHandler","bind","fileName","id","replace","Component","connect","GameGreeting","second_title","_startOnClickHandler","settings","btn_start_text","state","GameResults","result","_getResult","subtitle","btn_replay_text","_resetOnClickHandler","btn_next_text","gameReset","_this","correctAnswers","answers","filter","answer","correct","length","allResults","shares","step","correctPercent","_calcCorrectPercent","i","gameAnswers","GameQuestion","questionKey","question_ids","currentQuestionId","question","questions","questionText","questionImg","blocks","data","small_url","dangerouslySetInnerHTML","__html","gameCurrentQuestionId","GameAnswers","answerKeys","answer_ids","questionAnswers","map","answer_id","_renderAnswerBlock","comment_blocks","comment","buttonClassName","currentAnswerId","key","_answerOnClickHandler","text","event","gameAnswer","target","gameCurrentAnswerId","prevAnswers","Game","isStarted","isFinished","gameResults","gameQuestion","_nextQuestionOnClickHandler","gameGreeting","gameFinish","gameIsStarted","gameIsFinished","Games","components_game","games","loadingDiv","role","aria-hidden","gamesIsLoading","gamesFetch","_ref","gamesFetchDataSuccess","MeduzaApp","loading_loadingDiv","components_games","gamesHasErrored","combineReducers","arguments","undefined","action","gameHasErrored","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","es","store","createStore","rootReducer","compose","applyMiddleware","thunk","logger","meduzaApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAAaA,EAAoB,oBACpBC,EAAmB,mBACnBC,EAA2B,2BAG3BC,EAAmB,mBACnBC,EAAkB,kBAClBC,EAA0B,0BAE1BC,EAAe,eACfC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAe,eACfC,EAAa,aCFnB,SAASC,IACd,MAAO,CACLC,KAAMN,GAaH,SAASO,EAAYC,GAC1B,MAAO,CACLF,KAAMH,EACNK,YAAaA,GAuBV,SAASC,EAAcC,GAC5B,MAAO,CACLJ,KAAMR,EACNa,UAAWD,GAYR,SAASE,EAAUC,GACxB,GAAKA,EAEL,OAAO,SAAAC,GAGL,OAFAA,EAASL,GAAc,IAEhBM,MAAMF,EAAK,CAChBG,OAAQ,MACRC,QAAS,CACPC,eAAgB,mCAElBC,SAAU,UAETC,KAAK,SAAAC,GAEJ,GADAC,QAAQC,IAAIF,IACPA,EAASG,GACZ,MAAMC,MAAMJ,EAASK,YAGvB,OADAZ,EAASL,GAAc,IAChBY,IAERD,KAAK,SAAAC,GAAQ,OAAIA,EAASM,SAC1BP,KAAK,SAAAQ,GACJd,EA/BD,SAA8Bc,GAEnC,OADAN,QAAQC,IAAIK,GACL,CACLtB,KAAMP,EACN6B,KAAMA,GA2BOC,CAAqBD,MAE/BE,MAAM,SAAAC,GAAK,OAAIjB,EA9Cb,CACLR,KAAMT,EACNmC,YA4C0C,OC5FvC,ICMDC,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,IDXa,oBCWEC,KAAKC,MAAMC,SAASC,IACnCC,IAAKJ,KAAKC,MAAMC,SAASG,QAE3BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIC,QAASP,KAAKQ,oBAAoBC,KAAKT,OAChDA,KAAKC,MAAMC,SAASG,QAGzBV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,qDAON,IAAIY,EAAWV,KAAKC,MAAMC,SAASS,GAAGC,QAAQ,QAAS,IACnDtC,EDxBgB,2BCwBDsC,QAAQ,cAAeF,GAC1C3B,QAAQC,IAAIV,GACZ0B,KAAKC,MAAM5B,UAAUC,UAzBFuC,aA2CRC,cAVS,WACtB,MAAO,IAGkB,SAAAvC,GACzB,MAAO,CACLF,UAAW,SAAAC,GAAG,OAAIC,EAASF,EAAUC,OAI1BwC,CAA6CpB,GC3CtDqB,mLAGF,OADAhC,QAAQC,IAAIgB,KAAKC,OAEfN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXE,KAAKC,MAAMZ,KAAKgB,OAEnBV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACVE,KAAKC,MAAMZ,KAAK2B,cAGnBrB,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACVS,QAASP,KAAKiB,qBAAqBR,KAAKT,OAEvCA,KAAKC,MAAMZ,KAAK6B,SAASC,iEAQlCnB,KAAKC,MAAMnC,YACXkC,KAAKC,MAAMjC,YAAY,UA1BA6C,aAiDZC,cAbS,SAAAM,GACtB,MAAO,CACL/B,KAAM+B,EAAM/B,OAIW,SAAAd,GACzB,MAAO,CACLT,UAAW,SAAAQ,GAAG,OAAIC,EAAST,MAC3BE,YAAa,SAAAC,GAAW,OAAIM,EAASP,EAAYC,OAItC6C,CAA6CC,GCjDtDM,mLAEF,IAAMC,EAAStB,KAAKuB,aACpB,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXwB,EAAOjB,OAEVV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACVwB,EAAOE,UAGV7B,EAAAC,EAAAC,cAAA,UACEC,UAAU,mEACVS,QAASP,KAAKiB,qBAAqBR,KAAKT,OAEvCA,KAAKC,MAAMZ,KAAK6B,SAASO,iBAE5B9B,EAAAC,EAAAC,cAAA,UACEC,UAAU,mEACVS,QAASP,KAAK0B,qBAAqBjB,KAAKT,OAEvCA,KAAKC,MAAMZ,KAAK6B,SAASS,gEAQlC3B,KAAKC,MAAMnC,YACXkC,KAAKC,MAAMjC,YAAY,kDAIvBgC,KAAKC,MAAM2B,0DAGS,IAAAC,EAAA7B,KACd8B,EAAiB9B,KAAKC,MAAM8B,QAAQC,OACxC,SAAAC,GAAM,OAAIJ,EAAK5B,MAAMZ,KAAK0C,QAAQE,GAAQC,UAE5C,OAAOlC,KAAKC,MAAM8B,QAAQI,OAAS,EAC/BL,EAAeK,OAASnC,KAAKC,MAAM8B,QAAQI,OAC3C,uCAOJ,IAHA,IAAMC,EAAapC,KAAKC,MAAMZ,KAAKiC,OAAOe,OACtCC,EAAO,EAAIF,EAAWD,OACtBI,EAAiBvC,KAAKwC,sBACjBC,EAAI,EAAGA,GAAKL,EAAWD,OAAQM,IACtC,IAAKA,EAAI,GAAKH,GAAQC,EACpB,OAAOH,EAAWK,GAGtB,MAAO,CAAEpC,MAAO,GAAImB,SAAU,WAzDRX,aAoFXC,cAfS,SAAAM,GACtB,MAAO,CACL/B,KAAM+B,EAAM/B,KACZ0C,QAASX,EAAMsB,cAIQ,SAAAnE,GACzB,MAAO,CACLT,UAAW,SAAAQ,GAAG,OAAIC,EAAST,MAC3B8D,UAAW,SAAAtD,GAAG,OAAIC,EJ7Cb,CACLR,KAAMF,KI6CNG,YAAa,SAAAC,GAAW,OAAIM,EAASP,EAAYC,OAItC6C,CAA6CO,GCpFtDsB,mLAEF,IAAMC,EAAc5C,KAAKC,MAAMZ,KAAKwD,aAClC7C,KAAKC,MAAM6C,mBAEPC,EAAW/C,KAAKC,MAAMZ,KAAK2D,UAAUJ,GAEvCK,EAAe,GACfC,EAAc,GASlB,OAPIH,EAASI,OAAOhB,OAAS,GAAiC,MAA5BY,EAASI,OAAO,GAAGpF,OACnDkF,EAAeF,EAASI,OAAO,GAAGC,MAEhCL,EAASI,OAAOhB,OAAS,GAAiC,UAA5BY,EAASI,OAAO,GAAGpF,OACnDmF,EJnBiB,oBImBOH,EAASI,OAAO,GAAGC,KAAKC,WAIhD1D,EAAAC,EAAAC,cAAA,WACGqD,EACGvD,EAAAC,EAAAC,cAAA,OACEC,UAAU,sCACVC,IAAKmD,EACL9C,IAAK6C,IAEP,GACJtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,YACVwD,wBAAyB,CAAEC,OAAQN,cA7BpBpC,aAsDZC,cAXS,SAAAM,GACtB,MAAO,CACL/B,KAAM+B,EAAM/B,KACZyD,kBAAmB1B,EAAMoC,wBAIF,SAAAjF,GACzB,MAAO,IAGMuC,CAA6C6B,GCtDtDc,mLACK,IAAA5B,EAAA7B,KACD4C,EAAc5C,KAAKC,MAAMZ,KAAKwD,aAClC7C,KAAKC,MAAM6C,mBAGPY,EADW1D,KAAKC,MAAMZ,KAAK2D,UAAUJ,GACfe,WACtB5B,EAAU/B,KAAKC,MAAMZ,KAAK0C,QAC1B6B,EAAkBF,EAAWG,IAAI,SAAAC,GAAS,OAAI/B,EAAQ+B,KAE5D,OACEnE,EAAAC,EAAAC,cAAA,WACG+D,EAAgBC,IAAI,SAAA5B,GAAM,OAAIJ,EAAKkC,mBAAmB9B,iDAK1CA,GACjB,GAAKA,EAAO+B,gBAAmD,IAAjC/B,EAAO+B,eAAe7B,OAApD,CAEA,IAAIpE,EAAOkE,EAAO+B,eAAe,GAAGjG,KAChCqF,EAAOnB,EAAO+B,eAAe,GAAGZ,KAChCa,EAAU,KACD,MAATlG,IACFkG,EACEtE,EAAAC,EAAAC,cAAA,OACEC,UACEmC,EAAOC,QAAU,sBAAwB,qBAE3CoB,wBAAyB,CAAEC,OAAQH,MAIzC,IAAIc,EAAkB,0CAYtB,OAVElE,KAAKC,MAAMkE,kBAAoBlC,EAAOtB,IACrCX,KAAKC,MAAMkE,gBAGHnE,KAAKC,MAAMkE,kBAAoBlC,EAAOtB,IAAMsB,EAAOC,QAC5DgC,GAAmB,0BACVlE,KAAKC,MAAMkE,kBAAoBlC,EAAOtB,IAAOsB,EAAOC,UAC7DgC,GAAmB,0BAJnBA,GAAmB,4BAQnBvE,EAAAC,EAAAC,cAAA,OAAKuE,IAAKnC,EAAOtB,IACfhB,EAAAC,EAAAC,cAAA,UACEC,UAAWoE,EACXvD,GAAIsB,EAAOtB,GACXJ,QACGP,KAAKC,MAAMkE,gBAER,GADAnE,KAAKqE,sBAAsB5D,KAAKT,OAIrCiC,EAAOqC,MAETtE,KAAKC,MAAMkE,kBAAoBlC,EAAOtB,GAAKsD,EAAU,mDAKtCM,GACpBxF,QAAQC,IAAIgB,KAAKC,MAAM8B,SACvB,IAAIA,EAAU/B,KAAKC,MAAM8B,QAAU/B,KAAKC,MAAM8B,QAAU,GACxD/B,KAAKC,MAAMuE,WAAWzC,EAASwC,EAAME,OAAO9D,WAlEtBE,aA8FXC,cAhBS,SAAAM,GACtB,MAAO,CACL/B,KAAM+B,EAAM/B,KACZ0C,QAASX,EAAMsB,YACfI,kBAAmB1B,EAAMoC,sBACzBW,gBAAiB/C,EAAMsD,sBAIA,SAAAnG,GACzB,MAAO,CACLiG,WAAY,SAACG,EAAa1C,GAAd,OACV1D,EN/EC,SAAoBwD,EAASE,GAElC,OADAF,EAAQA,EAAQI,QAAUF,EACnB,CACLlE,KAAML,EACNqE,QAASA,EACTE,OAAQA,GM0EGuC,CAAWG,EAAa1C,OAIxBnB,CAA6C2C,GC1FtDmB,mLAEF,OAAK5E,KAAKC,MAAM4E,WAAc7E,KAAKC,MAAM6E,WAGrC9E,KAAKC,MAAM6E,WAENnF,EAAAC,EAAAC,cAACkF,EAAD,MAIPpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAAC6C,EAAD,MACC1C,KAAKC,MAAMkE,gBACRxE,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACVS,QAASP,KAAKiF,4BAA4BxE,KAAKT,OAE9CA,KAAKC,MAAMZ,KAAK6B,SAASS,eAE5BhC,EAAAC,EAAAC,cAAA,aAlBCF,EAAAC,EAAAC,cAACqF,EAAD,4DAyBPlF,KAAKC,MAAMZ,KAAKwD,aAAaV,OAAS,EACtCnC,KAAKC,MAAM6C,kBAEX9C,KAAKC,MAAMjC,YAAYgC,KAAKC,MAAM6C,kBAAoB,GAEtD9C,KAAKC,MAAMkF,oBAjCEtE,aAiEJC,cAlBS,SAAAM,GACtB,MAAO,CACL/B,KAAM+B,EAAM/B,KACZ0C,QAASX,EAAMsB,YACfI,kBAAmB1B,EAAMoC,sBACzBqB,UAAWzD,EAAMgE,cACjBN,WAAY1D,EAAMiE,eAClBlB,gBAAiB/C,EAAMsD,sBAIA,SAAAnG,GACzB,MAAO,CACLP,YAAa,SAAAM,GAAG,OAAIC,EAASP,EAAYM,KACzC6G,WAAY,kBAAM5G,EPrCb,CACLR,KAAMJ,OOwCKmD,CAA6C8D,GClEtDU,mLAIF,OAFAvG,QAAQC,IAAIgB,KAAKC,OAEZD,KAAKC,MAAMZ,KAUTM,EAAAC,EAAAC,cAAC0F,EAAD,MARH5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACZE,KAAKC,MAAMuF,MAAM3B,IAAI,SAAAxE,GAAI,OACxBM,EAAAC,EAAAC,cAACK,EAAD,CAAUA,SAAUb,EAAM+E,IAAK/E,EAAKsB,eAR5BE,aA8BLC,cAPS,SAAAM,GACtB,MAAO,CACLoE,MAAOpE,EAAMoE,MACbnG,KAAM+B,EAAM/B,OAIDyB,CAAyBwE,GCrCnBG,mLAEb,OACI9F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OACIC,UAAU,yBACV4F,KAAK,SACLC,cAAY,iBARQ9E,aCWjC,SAAS+E,EAAezH,GAC7B,MAAO,CACLJ,KAAMX,EACNgB,UAAWD,GAWR,SAAS0H,EAAWvH,GACzB,GAAKA,EAEL,OAAO,SAAAC,GAGL,OAFAA,EAASqH,GAAe,IAEjBpH,MAAMF,EAAK,CAChBG,OAAQ,MACRC,QAAS,CACPC,eAAgB,mCAElBC,SAAU,UAETC,KAAK,SAAAC,GACJ,IAAKA,EAASG,GACZ,MAAMC,MAAMJ,EAASK,YAGvB,OADAZ,EAASqH,GAAe,IACjB9G,IAERD,KAAK,SAAAC,GAAQ,OAAIA,EAASM,SAC1BP,KAAK,SAAAiH,GAAA,IAAGN,EAAHM,EAAGN,MAAH,OAAejH,EA5BpB,SAA+BiH,GACpC,MAAO,CACLzH,KAAMV,EACNmI,SAyBgCO,CAAsBP,MACnDjG,MAAM,SAAAC,GACLT,QAAQC,IAAIQ,GACZjB,EA5CC,CACLR,KAAMZ,EACNsC,YA0C6B,WCzC3BuG,8LAEFhG,KAAKC,MAAM4F,WVTU,uDUarB,OAAI7F,KAAKC,MAAMR,WACNE,EAAAC,EAAAC,cAAA,kDAGLG,KAAKC,MAAM7B,UACNuB,EAAAC,EAAAC,cAACoG,EAAD,MAIPtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACqG,EAAD,CAAOV,MAAOxF,KAAKC,MAAMuF,gBAhBT3E,aA2CTC,cAdS,SAAAM,GACtB,MAAO,CACLoE,MAAOpE,EAAMoE,MACb/F,WAAY2B,EAAM+E,gBAClB/H,UAAWgD,EAAMwE,iBAIM,SAAArH,GACzB,MAAO,CACLsH,WAAY,SAAAvH,GAAG,OAAIC,EAASsH,EAAWvH,OAI5BwC,CAA6CkF,0BCxC7CI,kBAAgB,CAC7BZ,MCWK,WAAmC,IAApBpE,EAAoBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,GAAAA,UAAA,GAAZ,GAAIE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACxC,OAAQC,EAAOxI,MACb,KAAKV,EACH,OAAOkJ,EAAOf,MAEhB,QACE,OAAOpE,IDhBX+E,gBCTK,WAAgD,IAAvB/E,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GAARE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACrD,OAAQC,EAAOxI,MACb,KAAKZ,EACH,OAAOoJ,EAAO9G,WAEhB,QACE,OAAO2B,IDIXwE,eCAK,WAA+C,IAAvBxE,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GAARE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACpD,OAAQC,EAAOxI,MACb,KAAKX,EACH,OAAOmJ,EAAOnI,UAChB,QACE,OAAOgD,IDJX/B,KEgDK,WAAoC,IAAtB+B,EAAsBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,GAAAA,UAAA,GAAd,KAAME,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACzC,OAAQC,EAAOxI,MACb,KAAKP,EACH,OAAO+I,EAAOlH,KAChB,KAAKxB,EACH,OAAO,KACT,QACE,OAAOuD,IFtDXsB,YE0DK,WAAyC,IAApBtB,EAAoBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,GAAAA,UAAA,GAAZ,GAAIE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EAC9C,OAAQC,EAAOxI,MACb,KAAKL,EACH,OAAO6I,EAAOxE,QAChB,KAAKtE,EAEL,KAAKI,EACH,MAAO,GACT,QACE,OAAOuD,IFlEXgE,cEWK,WAA8C,IAAvBhE,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GACnD,QADmDA,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,GACpCvI,MACb,KAAKN,EACH,OAAO,EACT,KAAKI,EACH,OAAO,EACT,QACE,OAAOuD,IFjBXsD,oBEqBK,WAAiD,IAApBtD,EAAoBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,GAAAA,UAAA,GAAZ,GAAIE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACtD,OAAQC,EAAOxI,MACb,KAAKL,EACH,OAAO6I,EAAOtE,QAAU,GAC1B,KAAKrE,EACH,MAAO,GACT,QACE,OAAOwD,IF3BXiE,eE+BK,WAA+C,IAAvBjE,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GACpD,QADoDA,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,GACrCvI,MACb,KAAKJ,EACH,OAAO,EACT,KAAKF,EAEL,KAAKI,EACH,OAAO,EACT,QACE,OAAOuD,IFvCXoC,sBEmEK,WAAmD,IAApBpC,EAAoBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,GAAAA,UAAA,GAAZ,GAAIE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACxD,OAAQC,EAAOxI,MACb,KAAKH,EACH,OAAO2I,EAAOtI,YAChB,KAAKJ,EACH,MAAO,GAET,QACE,OAAOuD,IF1EXoF,eEZK,WAA+C,IAAvBpF,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GAARE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACpD,OAAQC,EAAOxI,MACb,KAAKT,EACH,OAAOiJ,EAAO9G,WAEhB,QACE,OAAO2B,IFOXlD,cEHK,WAA8C,IAAvBkD,EAAuBiF,UAAAlE,OAAA,QAAAmE,IAAAD,UAAA,IAAAA,UAAA,GAARE,EAAQF,UAAAlE,OAAA,EAAAkE,UAAA,QAAAC,EACnD,OAAQC,EAAOxI,MACb,KAAKR,EACH,OAAOgJ,EAAOnI,UAChB,QACE,OAAOgD,MCdOqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACLvH,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAUC,MCTLC,YAAYC,EAAaC,YAAQC,YAAgBC,IAAOC,aDUzD/H,EAAAC,EAAAC,cAAC8H,EAAD,OAEJb,GD+GE,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMjJ,KAAK,SAAAkJ,GACjCA,EAAaC","file":"static/js/main.e8046526.chunk.js","sourcesContent":["export const GAMES_HAS_ERRORED = \"GAMES_HAS_ERRORED\";\r\nexport const GAMES_IS_LOADING = \"GAMES_IS_LOADING\";\r\nexport const GAMES_FETCH_DATA_SUCCESS = \"GAMES_FETCH_DATA_SUCCESS\";\r\n\r\nexport const GAME_START = \"GAME_START\";\r\nexport const GAME_HAS_ERRORED = \"GAME_HAS_ERRORED\";\r\nexport const GAME_IS_LOADING = \"GAME_IS_LOADING\";\r\nexport const GAME_FETCH_DATA_SUCCESS = \"GAME_FETCH_DATA_SUCCESS\";\r\nexport const GAME_SELECTED = \"GAME_SELECTED\";\r\nexport const GAME_STARTED = \"GAME_STARTED\";\r\nexport const GAME_ANSWERED = \"GAME_ANSWERED\";\r\nexport const GAME_FINISHED = \"GAME_FINISHED\";\r\nexport const SET_QUESTION = \"SET_QUESTION\";\r\nexport const GAME_RESET = \"GAME_RESET\";\r\n\r\n///////\r\nexport const QUESTION_SET = \"QUESTION_SET\";\r\n\r\nexport const ANSWERS_COUNT_INCREMENT = \"ANSWERS_COUNT_INCREMENT\";\r\nexport const SCORE_INCREMENT = \"SCORE_INCREMENT\";\r\n","import {\r\n  GAME_HAS_ERRORED,\r\n  GAME_IS_LOADING,\r\n  GAME_FETCH_DATA_SUCCESS,\r\n  GAME_STARTED,\r\n  GAME_ANSWERED,\r\n  GAME_RESET,\r\n  SET_QUESTION,\r\n  GAME_FINISHED\r\n} from \"../actionTypes\";\r\n\r\nexport function gameStart() {\r\n  return {\r\n    type: GAME_STARTED\r\n  };\r\n}\r\n\r\nexport function gameAnswer(answers, answer) {\r\n  answers[answers.length] = answer;\r\n  return {\r\n    type: GAME_ANSWERED,\r\n    answers: answers,\r\n    answer: answer\r\n  };\r\n}\r\n\r\nexport function setQuestion(question_id) {\r\n  return {\r\n    type: SET_QUESTION,\r\n    question_id: question_id\r\n  };\r\n}\r\n\r\nexport function gameFinish() {\r\n  return {\r\n    type: GAME_FINISHED\r\n  };\r\n}\r\n\r\nexport function gameReset() {\r\n  return {\r\n    type: GAME_RESET\r\n  };\r\n}\r\n\r\nexport function gameHasErrored(bool) {\r\n  return {\r\n    type: GAME_HAS_ERRORED,\r\n    hasErrored: bool\r\n  };\r\n}\r\n\r\nexport function gameIsLoading(bool) {\r\n  return {\r\n    type: GAME_IS_LOADING,\r\n    isLoading: bool\r\n  };\r\n}\r\n\r\nexport function gameFetchDataSuccess(game) {\r\n  console.log(game);\r\n  return {\r\n    type: GAME_FETCH_DATA_SUCCESS,\r\n    game: game\r\n  };\r\n}\r\n\r\nexport function gameFetch(url) {\r\n  if (!url) return;\r\n\r\n  return dispatch => {\r\n    dispatch(gameIsLoading(true));\r\n\r\n    return fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json; charset=utf-8\"\r\n      },\r\n      redirect: \"error\"\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        dispatch(gameIsLoading(false));\r\n        return response;\r\n      })\r\n      .then(response => response.json())\r\n      .then(game => {\r\n        dispatch(gameFetchDataSuccess(game));\r\n      })\r\n      .catch(error => dispatch(gameHasErrored(true)));\r\n  };\r\n}\r\n","export const MEDUZA_URL = \"https://meduza.io\";\r\nexport const IMG_URL = \"https://meduza.io\";\r\n//export const GAMES_URL = \"https://api.myjson.com/bins/15k1w9\";\r\nexport const GAMES_URL = \"../data/games.json\";\r\nexport const GAME_BASE_URL = \"https://meduza.io/embed/quiz-classic/api/\";\r\nexport const GAME_URL = \"../data/{file_name}.json\";","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { gameFetch } from \"../redux/actions/game\";\r\nimport { IMG_URL, GAME_URL } from \"../redux/consts\";\r\n\r\nclass GameCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card gameCard p-2\">\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={IMG_URL + this.props.gameCard.img}\r\n          alt={this.props.gameCard.title}\r\n        />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            <a href=\"#\" onClick={this._gameOnClickHandler.bind(this)}>\r\n              {this.props.gameCard.title}\r\n            </a>\r\n          </h5>\r\n          <p className=\"card-text\"> </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _gameOnClickHandler() {\r\n    let fileName = this.props.gameCard.id.replace(\"quiz/\", \"\");\r\n    let url = GAME_URL.replace(\"{file_name}\", fileName);\r\n    console.log(url);\r\n    this.props.gameFetch(url);\r\n  }\r\n}\r\n\r\nGameCard.propTypes = {\r\n  gameFetch: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = () => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    gameFetch: url => dispatch(gameFetch(url))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameCard);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { gameStart, setQuestion } from \"../redux/actions/game\";\r\n\r\nclass GameGreeting extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            {this.props.game.title}\r\n          </h5>\r\n          <p className=\"card-text\">\r\n            {this.props.game.second_title}\r\n          </p>\r\n\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            onClick={this._startOnClickHandler.bind(this)}\r\n          >\r\n            {this.props.game.settings.btn_start_text}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _startOnClickHandler() {\r\n    this.props.gameStart();\r\n    this.props.setQuestion(0);\r\n  }\r\n}\r\n\r\nGameGreeting.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameStart: PropTypes.func,\r\n  setQuestion: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: state.game\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    gameStart: url => dispatch(gameStart(url)),\r\n    setQuestion: question_id => dispatch(setQuestion(question_id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameGreeting);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { gameStart, setQuestion, gameReset } from \"../redux/actions/game\";\r\n\r\nclass GameResults extends Component {\r\n  render() {\r\n    const result = this._getResult();\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            {result.title}\r\n          </h5>\r\n          <p className=\"card-text\">\r\n            {result.subtitle}\r\n          </p>\r\n\r\n          <button\r\n            className=\"list-group-item list-group-item-action list-group-item-secondary\"\r\n            onClick={this._startOnClickHandler.bind(this)}\r\n          >\r\n            {this.props.game.settings.btn_replay_text}\r\n          </button>\r\n          <button\r\n            className=\"list-group-item list-group-item-action list-group-item-secondary\"\r\n            onClick={this._resetOnClickHandler.bind(this)}\r\n          >\r\n            {this.props.game.settings.btn_next_text}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _startOnClickHandler() {\r\n    this.props.gameStart();\r\n    this.props.setQuestion(0);\r\n  }\r\n\r\n  _resetOnClickHandler() {\r\n    this.props.gameReset();\r\n  }\r\n\r\n  _calcCorrectPercent() {\r\n    const correctAnswers = this.props.answers.filter(\r\n      answer => this.props.game.answers[answer].correct\r\n    );\r\n    return this.props.answers.length > 0\r\n      ? correctAnswers.length / this.props.answers.length\r\n      : 0;\r\n  }\r\n\r\n  _getResult() {\r\n    const allResults = this.props.game.result.shares;\r\n    let step = 1 / allResults.length;\r\n    let correctPercent = this._calcCorrectPercent();\r\n    for (let i = 0; i <= allResults.length; i++) {\r\n      if ((i + 1) * step >= correctPercent) {\r\n        return allResults[i];\r\n      }\r\n    }\r\n    return { title: \"\", subtitle: \"\" };\r\n  }\r\n}\r\n\r\nGameResults.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  answers: PropTypes.array,\r\n  gameStart: PropTypes.func,\r\n  gameReset: PropTypes.func,\r\n  setQuestion: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: state.game,\r\n    answers: state.gameAnswers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    gameStart: url => dispatch(gameStart(url)),\r\n    gameReset: url => dispatch(gameReset(url)),\r\n    setQuestion: question_id => dispatch(setQuestion(question_id))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameResults);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { IMG_URL } from \"../redux/consts\";\r\n\r\nclass GameQuestion extends Component {\r\n  render() {\r\n    const questionKey = this.props.game.question_ids[\r\n      this.props.currentQuestionId\r\n    ];\r\n    const question = this.props.game.questions[questionKey];\r\n\r\n    let questionText = \"\";\r\n    let questionImg = \"\";\r\n\r\n    if (question.blocks.length > 0 && question.blocks[0].type === \"p\") {\r\n      questionText = question.blocks[0].data;\r\n    }\r\n    if (question.blocks.length > 1 && question.blocks[1].type === \"image\") {\r\n      questionImg = IMG_URL + question.blocks[1].data.small_url;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {questionImg\r\n          ? <img\r\n              className=\"card-img-top img-fluid question-img\"\r\n              src={questionImg}\r\n              alt={questionText}\r\n            />\r\n          : \"\"}\r\n        <div className=\"card-body\">\r\n          <p\r\n            className=\"card-text\"\r\n            dangerouslySetInnerHTML={{ __html: questionText }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGameQuestion.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  currentQuestionId: PropTypes.number,\r\n  gameStart: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: state.game,\r\n    currentQuestionId: state.gameCurrentQuestionId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameQuestion);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { gameAnswer } from \"../redux/actions/game\";\r\n\r\nclass GameAnswers extends Component {\r\n  render() {\r\n    const questionKey = this.props.game.question_ids[\r\n      this.props.currentQuestionId\r\n    ];\r\n    const question = this.props.game.questions[questionKey];\r\n    const answerKeys = question.answer_ids;\r\n    const answers = this.props.game.answers;\r\n    const questionAnswers = answerKeys.map(answer_id => answers[answer_id]);\r\n\r\n    return (\r\n      <div>\r\n        {questionAnswers.map(answer => this._renderAnswerBlock(answer))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _renderAnswerBlock(answer) {\r\n    if (!answer.comment_blocks || answer.comment_blocks.length === 0) return;\r\n\r\n    let type = answer.comment_blocks[0].type;\r\n    let data = answer.comment_blocks[0].data;\r\n    let comment = null;\r\n    if (type === \"p\") {\r\n      comment = (\r\n        <div\r\n          className={\r\n            answer.correct ? \"alert alert-success\" : \"alert alert-danger\"\r\n          }\r\n          dangerouslySetInnerHTML={{ __html: data }}\r\n        />\r\n      );\r\n    }\r\n    let buttonClassName = \"list-group-item list-group-item-action \";\r\n    if (\r\n      this.props.currentAnswerId !== answer.id ||\r\n      !this.props.currentAnswerId\r\n    ) {\r\n      buttonClassName += \"list-group-item-secondary\";\r\n    } else if (this.props.currentAnswerId === answer.id && answer.correct) {\r\n      buttonClassName += \"list-group-item-success\";\r\n    } else if (this.props.currentAnswerId === answer.id && !answer.correct) {\r\n      buttonClassName += \"list-group-item-danger\";\r\n    }\r\n\r\n    return (\r\n      <div key={answer.id}>\r\n        <button\r\n          className={buttonClassName}\r\n          id={answer.id}\r\n          onClick={\r\n            !this.props.currentAnswerId\r\n              ? this._answerOnClickHandler.bind(this)\r\n              : \"\"\r\n          }\r\n        >\r\n          {answer.text}\r\n        </button>\r\n        {this.props.currentAnswerId === answer.id ? comment : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _answerOnClickHandler(event) {\r\n    console.log(this.props.answers);\r\n    let answers = this.props.answers ? this.props.answers : [];\r\n    this.props.gameAnswer(answers, event.target.id);\r\n  }\r\n}\r\n\r\nGameAnswers.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  answers: PropTypes.array,\r\n  currentQuestionId: PropTypes.number,\r\n  currentAnswerId: PropTypes.string,\r\n  gameAnswer: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: state.game,\r\n    answers: state.gameAnswers,\r\n    currentQuestionId: state.gameCurrentQuestionId,\r\n    currentAnswerId: state.gameCurrentAnswerId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    gameAnswer: (prevAnswers, answer) =>\r\n      dispatch(gameAnswer(prevAnswers, answer))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameAnswers);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport GameGreeting from \"./gameGreeting\";\r\nimport GameResults from \"./gameResults\";\r\nimport GameQuestion from \"./gameQuestion\";\r\nimport GameAnswers from \"./gameAnswers\";\r\nimport { setQuestion, gameFinish } from \"../redux/actions/game\";\r\n\r\nclass Game extends Component {\r\n  render() {\r\n    if (!this.props.isStarted && !this.props.isFinished) {\r\n      return <GameGreeting />;\r\n    }\r\n    if (this.props.isFinished) {\r\n      //return <GameResults />;\r\n      return <GameResults />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"card question\">\r\n        <GameQuestion />\r\n        <GameAnswers />\r\n        {this.props.currentAnswerId\r\n          ? <button\r\n              className=\"btn btn-primary\"\r\n              onClick={this._nextQuestionOnClickHandler.bind(this)}\r\n            >\r\n              {this.props.game.settings.btn_next_text}\r\n            </button>\r\n          : <div />}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _nextQuestionOnClickHandler() {\r\n    if (\r\n      this.props.game.question_ids.length - 1 >\r\n      this.props.currentQuestionId\r\n    ) {\r\n      this.props.setQuestion(this.props.currentQuestionId + 1);\r\n    } else {\r\n      this.props.gameFinish();\r\n    }\r\n  }\r\n}\r\n\r\nGame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  currentQuestionId: PropTypes.number,\r\n  isStarted: PropTypes.bool,\r\n  isFinished: PropTypes.bool,\r\n  currentAnswerId: PropTypes.string,\r\n  answers: PropTypes.array\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: state.game,\r\n    answers: state.gameAnswers,\r\n    currentQuestionId: state.gameCurrentQuestionId,\r\n    isStarted: state.gameIsStarted,\r\n    isFinished: state.gameIsFinished,\r\n    currentAnswerId: state.gameCurrentAnswerId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setQuestion: url => dispatch(setQuestion(url)),\r\n    gameFinish: () => dispatch(gameFinish())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport GameCard from \"./gameCard\";\r\nimport Game from \"./game\";\r\n\r\n//import Game from \"./game\";\r\n\r\nclass Games extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n\r\n    if (!this.props.game) {\r\n      return (\r\n        <div className=\"d-flex align-content-start flex-wrap gameCards\">\r\n          {this.props.games.map(game =>\r\n            <GameCard gameCard={game} key={game.id} />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <Game />;\r\n  }\r\n}\r\n\r\nGames.propTypes = {\r\n  games: PropTypes.array.isRequired,\r\n  game: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    games: state.games,\r\n    game: state.game\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Games);\r\n","import React, { Component } from 'react';\r\n\r\nexport default class loadingDiv extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex align-items-center\">\r\n                <strong>Loading...</strong>\r\n                <div\r\n                    className=\"spinner-border ml-auto\"\r\n                    role=\"status\"\r\n                    aria-hidden=\"true\"\r\n                ></div>\r\n            </div>\r\n        );\r\n    }\r\n}","import {\r\n  GAMES_HAS_ERRORED,\r\n  GAMES_IS_LOADING,\r\n  GAMES_FETCH_DATA_SUCCESS\r\n} from \"../actionTypes\";\r\n\r\nexport function gamesHasErrored(bool) {\r\n  return {\r\n    type: GAMES_HAS_ERRORED,\r\n    hasErrored: bool\r\n  };\r\n}\r\n\r\nexport function gamesIsLoading(bool) {\r\n  return {\r\n    type: GAMES_IS_LOADING,\r\n    isLoading: bool\r\n  };\r\n}\r\n\r\nexport function gamesFetchDataSuccess(games) {\r\n  return {\r\n    type: GAMES_FETCH_DATA_SUCCESS,\r\n    games\r\n  };\r\n}\r\n\r\nexport function gamesFetch(url) {\r\n  if (!url) return;\r\n\r\n  return dispatch => {\r\n    dispatch(gamesIsLoading(true));\r\n\r\n    return fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json; charset=utf-8\"\r\n      },\r\n      redirect: \"error\"\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw Error(response.statusText);\r\n        }\r\n        dispatch(gamesIsLoading(false));\r\n        return response;\r\n      })\r\n      .then(response => response.json())\r\n      .then(({ games }) => dispatch(gamesFetchDataSuccess(games)))\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(gamesHasErrored(true));\r\n      });\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Games from \"./components/games\";\r\nimport Loading from \"./components/loading\";\r\n\r\nimport { gamesFetch } from \"./redux/actions/games\";\r\nimport { GAMES_URL } from \"./redux/consts\";\r\n\r\nclass MeduzaApp extends Component {\r\n  componentDidMount() {\r\n    this.props.gamesFetch(GAMES_URL);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.hasErrored) {\r\n      return <p> Ooops... Games cannot be loaded :-( </p>;\r\n    }\r\n\r\n    if (this.props.isLoading) {\r\n      return <Loading />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"meduzaApp container\">\r\n        <Games games={this.props.games} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMeduzaApp.propTypes = {\r\n  gamesFetch: PropTypes.func.isRequired,\r\n  games: PropTypes.array.isRequired,\r\n  hasErrored: PropTypes.bool.isRequired,\r\n  isLoading: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    games: state.games,\r\n    hasErrored: state.gamesHasErrored,\r\n    isLoading: state.gamesIsLoading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    gamesFetch: url => dispatch(gamesFetch(url))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MeduzaApp);\r\n","import { combineReducers } from \"redux\";\r\nimport { games, gamesHasErrored, gamesIsLoading } from \"./games\";\r\nimport {\r\n  game,\r\n  gameAnswers,\r\n  gameHasErrored,\r\n  gameIsLoading,\r\n  gameIsStarted,\r\n  gameCurrentAnswerId,\r\n  gameIsFinished,\r\n  gameCurrentQuestionId\r\n} from \"./game\";\r\n\r\nexport default combineReducers({\r\n  games,\r\n  gamesHasErrored,\r\n  gamesIsLoading,\r\n  game,\r\n  gameAnswers,\r\n  gameIsStarted,\r\n  gameCurrentAnswerId,\r\n  gameIsFinished,\r\n  gameCurrentQuestionId,\r\n  gameHasErrored,\r\n  gameIsLoading\r\n});\r\n","import {\r\n  GAMES_HAS_ERRORED,\r\n  GAMES_IS_LOADING,\r\n  GAMES_FETCH_DATA_SUCCESS\r\n} from \"../actionTypes\";\r\n\r\nexport function gamesHasErrored(state = false, action) {\r\n  switch (action.type) {\r\n    case GAMES_HAS_ERRORED:\r\n      return action.hasErrored;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gamesIsLoading(state = false, action) {\r\n  switch (action.type) {\r\n    case GAMES_IS_LOADING:\r\n      return action.isLoading;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function games(state = [], action) {\r\n  switch (action.type) {\r\n    case GAMES_FETCH_DATA_SUCCESS:\r\n      return action.games;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  GAME_HAS_ERRORED,\r\n  GAME_IS_LOADING,\r\n  GAME_FETCH_DATA_SUCCESS,\r\n  GAME_STARTED,\r\n  SET_QUESTION,\r\n  GAME_ANSWERED,\r\n  GAME_FINISHED,\r\n  GAME_RESET\r\n} from \"../actionTypes\";\r\n\r\nexport function gameHasErrored(state = false, action) {\r\n  switch (action.type) {\r\n    case GAME_HAS_ERRORED:\r\n      return action.hasErrored;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameIsLoading(state = false, action) {\r\n  switch (action.type) {\r\n    case GAME_IS_LOADING:\r\n      return action.isLoading;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameIsStarted(state = false, action) {\r\n  switch (action.type) {\r\n    case GAME_STARTED:\r\n      return true;\r\n    case GAME_RESET:\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameCurrentAnswerId(state = \"\", action) {\r\n  switch (action.type) {\r\n    case GAME_ANSWERED:\r\n      return action.answer || \"\";\r\n    case SET_QUESTION:\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameIsFinished(state = false, action) {\r\n  switch (action.type) {\r\n    case GAME_FINISHED:\r\n      return true;\r\n    case GAME_STARTED:\r\n      return false;\r\n    case GAME_RESET:\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function game(state = null, action) {\r\n  switch (action.type) {\r\n    case GAME_FETCH_DATA_SUCCESS:\r\n      return action.game;\r\n    case GAME_RESET:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameAnswers(state = [], action) {\r\n  switch (action.type) {\r\n    case GAME_ANSWERED:\r\n      return action.answers;\r\n    case GAME_STARTED:\r\n      return [];\r\n    case GAME_RESET:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function gameCurrentQuestionId(state = \"\", action) {\r\n  switch (action.type) {\r\n    case SET_QUESTION:\r\n      return action.question_id;\r\n    case GAME_RESET:\r\n      return \"\";\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport MeduzaApp from \"./meduzaApp\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <Provider store={store()}>\r\n        <MeduzaApp />\r\n    </Provider>,\r\n    rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { logger } from \"redux-logger\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default function store() {\r\n  return createStore(rootReducer, compose(applyMiddleware(thunk, logger)));\r\n}\r\n"],"sourceRoot":""}